generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId  Int        @id @default(autoincrement())
  userId     String     @unique // 사용자 아이디는 중복되지 않도록 설정
  password   String
  characters Character[]
  @@map("Account")
}

model Character {
  characterId Int         @id @default(autoincrement())
  name        String      @unique
  level       Int         @default(1)
  accountId   Int         // 외래 키 필드로 Account 모델과 연결
  money       Int         @default(10000)  // 캐릭터 생성 시 기본 게임머니 10,000
  health      Int         @default(100)    // 기본 체력 (Health)
  strength    Int         @default(10)     // 기본 힘 (Strength)

  inventory   Inventory[]
  equippedItems EquippedItem[]

  account     Account     @relation(fields: [accountId], references: [accountId],  onDelete: Cascade)

  @@map("Character")
}

model Item {
  itemId      Int         @id @default(autoincrement())
  name       String      @unique
  price       Int         @default(0)  // 아이템 가격
  stats       Json        // 아이템의 스탯을 JSON으로 관리 (Health와 Strength 포함)
vc 
  inventory   Inventory[]
  equippedItems EquippedItem[]
  @@map("Item")
}

model Inventory {
  inventoryId Int         @id @default(autoincrement())
  characterId Int
  itemId      Int
  quantity    Int         @default(1)

  character   Character   @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  item        Item        @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  @@map("Inventory")
}

model EquippedItem {
  equippedItemId Int      @id @default(autoincrement())
  characterId    Int
  itemId         Int
  character      Character @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  item           Item      @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
  @@map("EquippedItem")
}
